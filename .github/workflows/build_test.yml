name: Build Test
on:
  push:
    branches:
    - 'main'
  pull_request:
    branches:
    - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        config:
          - {rosdistro: 'melodic', container: 'ros:melodic-ros-base-bionic'}
          - {rosdistro: 'noetic', container: 'ros:noetic-ros-base-focal'}
    container: ${{ matrix.config.container }}
    steps:
    - uses: actions/checkout@v1
#      with:
#        token: ${{ secrets.ACCESS_TOKEN }}
#        github-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Install catkin-tools on melodic
      if: ${{ matrix.config.container == 'ros:melodic-ros-base-bionic' }}
      run: |
        apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
        apt update && apt install -y python-wstool python-catkin-tools 
    - name: Install catkin-tools on Noetic
      if: ${{ matrix.config.container == 'ros:noetic-ros-base-focal' }}
      run: |
        apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
        apt update && apt install -y python3-pip
        pip3 install osrf-pycommon
        apt update && apt install -y python3-wstool python3-catkin-tools
    - name: release_build_test
      working-directory: 
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        apt update
        apt install -y autoconf libtool git
        mkdir -p $HOME/catkin_ws/src;
        cd $HOME/catkin_ws
        catkin init
        catkin config --extend "/opt/ros/${{matrix.config.rosdistro}}"
        catkin config --merge-devel
        cd $HOME/catkin_ws/src
        ln -s $GITHUB_WORKSPACE
        git clone git@github.com:ethz-asl/glog_catkin.git
        git clone git@github.com:ethz-asl/gflags_catkin.git
        git clone git@github.com:ethz-asl/minkindr.git
        git clone git@github.com:ethz-asl/eigen_catkin.git
        catkin config --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo
        catkin build -j$(nproc) -l$(nproc) config_utilities
      shell: bash
#    - name: unit_tests
#      working-directory:
#      run: |
#        cd $HOME/catkin_ws/src
#        catkin config --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCATKIN_ENABLE_TESTING=True
#        catkin build terrain_planner --no-deps -i --catkin-make-args tests
#        source $HOME/catkin_ws/devel/setup.bash
#        status=0 && for f in $HOME/catkin_ws/devel/lib/*/*-test; do $f || exit 1; done
#      shell: bash
      

